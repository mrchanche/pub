import random
import time
import os
import re

words_list = [
    "choom",
    "preem",
    "gibs",
    "posers",
    "gonk",
    "meat",
    "skell",
    "vista",
    "flatline",
    "data",
    "netrunner",
    "cyberware",
    "solider",
    "edgerunner",
    "fixer",
    "corp",
    "braindance",
    "rez",
    "ICE",
    "blackwall",
    "daimon",
    "shard",
    "booster",
    "deck",
    "ware",
    "chrome",
    "glitch",
    "jacks",
    "scav",
    "rileys",
    "klicks",
    "Eddies",
    "eurodollars",
    "preemfood",
    "burn",
    "frag",
    "juice",
    "rig",
    "shin",
    "skin",
    "splice",
    "stack",
    "synth",
    "ghost",
    "gangers",
    "nomad",
    "rogue",
    "streetkid",
    "corpo",
    "brave",
    "scum",
    "kero",
    "scrap",
    "waste",
    "hold",
    "zone",
    "dig",
    "node",
    "spike",
    "trace",
    "void",
    "burnout",
    "wipe",
    "v",
    "johnny",
    "skippy",
    "jack",
    "runner",
    "corpsec",
    "rip",
    "chip",
    "grid",
    "nexus",
    "vault",
    "scan",
    "shell",
    "boot",
    "wall",
    "port",
    "link",
    "code",
    "byte",
    "mod",
    "crash",
    "hack",
    "login",
    "logout",
    "buffer",
    "signal",
    "noise",
    "firewall",
    "upload",
    "download",
    "protocol",
    "system",
    "database",
    "mainframe",
    "virus",
    "worm",
    "malware",
    "encryption",
    "decryption",
    "algorithm",
    "program",
    "application",
    "interface",
    "terminal",
    "monitor",
    "keyboard",
    "mouse",
    "camera",
    "sensor",
    "scanner",
    "robot",
    "drone",
    "AI",
    "cyberdeck",
    "cyberimplant",
    "optical",
    "neural",
    "sensory",
    "muscle",
    "skeleton",
    "skin",
    "armor",
    "weapon",
    "ammo",
    "grenade",
    "explosive",
    "shield",
    "vehicle",
    "motorcycle",
    "car",
    "truck",
    "plane",
    "ship",
    "street",
    "alley",
    "district",
    "apartment",
    "hotel",
    "club",
    "bar",
    "restaurant",
    "shop",
    "market",
    "factory",
    "hospital",
    "clinic",
    "police",
    "station",
    "prison",
    "court",
    "government",
    "corporation",
    "night",
    "day",
    "rain",
    "smoke",
    "neon",
    "shadow",
    "light",
    "dust",
    "concrete",
    "metal",
    "glass",
    "plastic",
    "steel",
    "titanium",
    "carbon",
    "optics",
    "kerenzikov",
    "kiroshi",
    "militech",
    "cybernetic arm",
    "cybernetic leg",
    "neural processor",
    "memory boost",
    "reflex tuner",
    "subdermal armor",
    "reinforced tendons",
    "optical camouflage",
    "smartlink",
    "projectile launcher",
    "monowire",
    "sandevistan",
    "double jump",
    "mantis blades",
    "gorilla arms",
    "projectile launcher",
    "cybernetic eyes",
    "cybernetic heart",
    "cybernetic lungs",
    "cybernetic kidneys",
    "cybernetic stomach",
    "cybernetic bladder",
    "cybernetic immune system",
    "cybernetic nervous system",
    "cybernetic digestive system",
    "cybernetic reproductive system",
    "biomonitor",
    "biochip",
    "bioscanner",
    "bioware",
    "synthskin",
    "chromedome",
    "datalink",
    "headup display",
    "virtual reality",
    "augmented reality",
    "brain interface",
    "neural network",
    "artificial intelligence",
    "drone control",
    "robotic arm",
    "robotic leg",
    "cybernetic spine",
    "cybernetic muscles",
    "cybernetic bones",
    "cybernetic organs",
    "nanobots",
    "synthetic organs",
    "genetic engineering",
    "cloning",
    "cybernetic implants",
    "cybernetic enhancements",
    "cybernetic upgrades",
    "cybernetic modifications",
    "cybernetic prosthetics",
    "cybernetic exoskeleton",
    "cybernetic armor",
    "cybernetic weapons",
    "cybernetic vehicles",
    "cybernetic tools",
    "cybernetic clothing",
    "cybernetic accessories",
    "cybernetic software",
    "cybernetic hardware",
    "cybernetic security",
    "cybernetic espionage",
    "cybernetic warfare",
    "ICE breaker",
    "daemon",
    "blackwall",
    "data fortress",
    "netwatch",
    "proxy",
    "firewall",
    "encryption",
    "decryption",
    "algorithm",
    "protocol",
    "system",
    "database",
    "mainframe",
    "virus",
    "worm",
    "malware",
    "cyberdeck",
    "quickhacks",
    "breach protocol",
    "remote access",
    "overclock",
    "daimon suite",
    "neural interface",
    "virtual shell",
    "data mine",
    "digital ghost",
    "netspace",
    "cyberwar",
    "digital security",
    "information warfare",
    "cybernetic combat",
    "augmented vision",
    "enhanced hearing",
    "infrared vision",
    "thermal vision",
    "night vision",
    "zoom vision",
    "x-ray vision",
    "enhanced reflexes",
    "enhanced strength",
    "enhanced speed",
    "enhanced endurance",
    "enhanced agility",
    "enhanced perception",
    "enhanced intelligence",
    "enhanced memory",
    "night city",
    "wellesley",
    "heywood",
    "pacifica",
    "westbrook",
    "city center",
    "santa domingo",
    "badlands",
    "kabuki market",
    "little china",
    "jordan",
    "koroholo",
    "dogtown",
    "araska",
    "sunset valley",
    "charter hill",
    "no man's land",
    "mega building",
    "apartments",
    "clubs",
    "bars",
    "restaurants",
    "shops",
    "markets",
    "factories",
    "hospitals",
    "clinics",
    "police stations",
    "prisons",
    "courts",
    "government buildings",
    "corporation headquarters",
    "docks",
    "warehouses",
    "airports",
    "highways",
    "subways",
    "parks",
    "beaches",
    "deserts",
    "mountains",
    "forests",
    "rivers",
    "lakes",
    "oceans",
    "plazas",
    "skyscrapers",
    "underground tunnels",
    "abandoned buildings",
    "construction sites",
    "parking lots",
    "rooftops",
    "side streets",
    "alleys",
    "parking garages",
    "industrial parks",
    "commercial districts",
    "residential areas",
    "entertainment districts",
    "financial districts",
    "political districts",
    "historical districts",
    "cultural districts",
    "religious districts",
    "tourist attractions",
    "landmarks",
    "monuments",
    "statues",
    "public squares",
    "gardens",
    "cemeteries",
    "wastelands",
    "slums",
    "shanty towns",
    "refugee camps",
    "military bases",
    "research facilities",
    "power plants",
    "water treatment plants",
    "sewage treatment plants",
    "araska corporation",
    "militech corporation",
    "kang tao corporation",
    "biotech corporation",
    "trauma team international",
    "voodoo boys",
    "animals",
    "tyger claws",
    "mox",
    "nomads",
    "valentinos",
    "6th street gang",
    "wraiths",
    "badlands nomads",
    "aldermans",
    "steel ghosts",
    "pacifica gang",
    "westbrook gang",
    "koroholo gang",
    "kabuki market gang",
    "little china gang",
    "heywood gang",
    "santa domingo gang",
    "araska corporation security",
    "militech corporation security",
    "kang tao corporation security",
    "biotech corporation security",
    "trauma team international security",
    "voodoo boys security",
    "animals security",
    "tyger claws security",
    "mox security",
    "nomad security",
    "valentinos security",
    "6th street gang security",
    "wraiths security",
    "badlands nomads security",
    "aldermans security",
    "steel ghosts security",
    "pacifica gang security",
    "westbrook gang security",
    "koroholo gang security",
    "kabuki market gang security",
    "little china gang security",
    "heywood gang security",
    "santa domingo gang security",
    "fixers",
    "solo",
    "netrunners",
    "techies",
    "media",
    "law enforcement",
    "military",
    "government officials",
    "corporate executives",
    "street vendors",
    "mercenaries",
    "bodyguards",
    "drivers",
    "pilots",
    "cyberpunk",
    "punk",
    "rebel",
    "v",
    "johnny silverhand",
    "jackie weles",
    "judy Ã¡lvarez",
    "panam palmer",
    "river ward",
    "rogoro",
    "saburo arata",
    "takemura",
    "alt cuniff",
    "dexter deShawn",
    "emily weaver",
    "kevin milligan",
    "rogers",
    "placide",
    "marlene",
    "spritzer",
    "doll",
    "santiago",
    "rafael",
    "tracey",
    "monica",
    "adam slipper",
    "kieran",
    "misa",
    "bob",
    "wade",
    "rebecca",
    "brian",
    "doyle",
    "frank",
    "george",
    "harry",
    "irene",
    "jake",
    "kate",
    "lance",
    "mike",
    "nancy",
    "oliver",
    "paul",
    "quinn",
    "ray",
    "stacy",
    "tom",
    "ursula",
    "victor",
    "william",
    "xavier",
    "yara",
    "zachary",
    "braindance",
    "eurodollars",
    "klicks",
    "flatline",
    "data",
    "ICE",
    "daemon",
    "shard",
    "booster",
    "deck",
    "ware",
    "chrome",
    "glitch",
    "jacks",
    "scav",
    "rileys",
    "burn",
    "frag",
    "juice",
    "rig",
    "shin",
    "skin",
    "splice",
    "stack",
    "synth",
    "ghost",
    "gangers",
    "nomad",
    "rogue",
    "skell",
    "vista",
    "posers",
    "choom",
    "preem",
    "gibs",
    "meat",
    "preemfood",
    "burnout",
    "wipe",
    "johnny",
    "skippy",
    "jack",
    "runner",
    "corpsec",
    "rip",
    "chip",
    "grid",
    "nexus",
    "vault",
    "scan",
    "shell",
    "boot",
    "wall",
    "port",
    "link",
    "code",
    "byte",
    "mod",
    "crash",
    "hack",
    "login",
    "logout",
    "buffer",
    "signal",
    "noise",
    "firewall",
    "upload",
    "download",
    "protocol",
    "system",
    "database",
    "mainframe",
    "virus",
    "worm",
    "malware",
    "encryption",
    "decryption",
    "algorithm",
    "program",
    "application",
    "interface",
    "terminal",
    "monitor",
    "keyboard",
    "mouse",
    "camera",
    "sensor",
    "scanner",
    "robot",
    "drone",
    "AI",
    "cyberdeck",
    "cyberimplant",
    "optical",
    "neural",
    "sensory",
    "muscle",
    "skeleton",
    "skin",
    "armor",
    "weapon",
    "ammo",
    "grenade",
    "explosive",
    "shield",
    "vehicle",
    "motorcycle",
    "car",
    "truck",
    "plane",
    "ship",
    "street",
    "alley",
    "district",
    "apartment",
    "hotel",
    "club",
    "bar",
    "restaurant",
    "shop",
    "market",
    "factory",
    "hospital",
    "clinic",
    "police",
    "station",
    "prison",
    "court",
    "government",
    "corporation",
    "night",
    "day",
    "rain",
    "smoke",
    "neon",
    "shadow",
    "light",
    "dust",
    "concrete",
    "metal",
    "glass",
    "plastic",
    "steel",
    "titanium",
    "carbon",
    "ls",
    "cd",
    "pwd",
    "mkdir",
    "rmdir",
    "rm",
    "cp",
    "mv",
    "chmod",
    "chown",
    "chgrp",
    "cat",
    "echo",
    "touch",
    "nano",
    "vim",
    "grep",
    "find",
    "locate",
    "du",
    "df",
    "tar",
    "zip",
    "unzip",
    "ps",
    "top",
    "htop",
    "kill",
    "killall",
    "service",
    "systemctl",
    "ifconfig",
    "ip",
    "netstat",
    "ping",
    "traceroute",
    "curl",
    "wget",
    "sudo",
    "apt-get",
    "apt-cache",
    "dpkg",
    "apt-key",
    "add-apt-repository",
    "useradd",
    "userdel",
    "groupadd",
    "groupdel",
    "passwd",
    "ssh",
    "scp",
    "rsync",
    "cron",
    "crontab",
    "journalctl",
    "dmesg",
    "lspci",
    "lsusb",
    "lshw",
    "free",
    "vmstat",
    "iostat",
    "netcat",
    "nc",
    "tcpdump",
    "strace",
    "ldd",
    "nm",
    "objdump",
    "readelf",
    "make",
    "gcc",
    "g++",
    "clang",
    "docker",
    "docker-compose",
    "kubectl",
    "helm",
    "jq",
    "awk",
    "sed",
    "bc",
    "dc",
    "perl",
    "python3",
    "pip3",
    "npm",
    "yarn",
    "git",
    "svn",
    "rsync",
    "scp",
    "ssh-keygen",
    "ssh-agent",
    "sftp",
    "lsof",
    "killall",
    "nice",
    "renice",
    "nohup",
    "screen",
    "tmux",
    "dig",
    "nslookup",
    "whois",
    "dig",
    "nslookup",
    "host",
    "resolvectl",
    "nmcli",
    "nmtui",
    "firewall-cmd",
    "ufw",
    "iptables",
    "sshd",
    "ssh-agent",
    "ssh-keygen",
    "ssh-copy-id",
    "scp",
    "sftp",
    "rsync",
    "ncftp",
    "lftp",
    "curl",
    "wget",
    "lynx",
    "w3m",
    "tcpdump",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "john-the-ripper",
    "hashcat",
    "aircrack-ng",
    "reaver",
    "bully",
    "mdk3",
    "hostapd-mana",
    "wifite",
    "pixiewps",
    "cowpatty",
    "packetforge-ng",
    "airmon-ng",
    "airodump-ng",
    "aireplay-ng",
    "wash",
    "kismet",
    "tcpflow",
    "tcpreplay",
    "tcpcutter",
    "tshark",
    "wireshark",
    "ngrep",
    "ettercap",
    "nmap",
    "metasploit-framework",
    "ls -l",
    "cd ..",
    "pwd",
    "echo Hello World",
    "mkdir new_directory",
    "rm old_file",
    "cp source_file destination_file",
    "mv old_name new_name",
    "cat filename.txt",
    "grep 'pattern' file.txt",
    "find /path/to/search -name '*.txt'",
    "chmod 755 script.sh",
    "chown user:group file.txt",
    "sudo apt update",
    "sudo apt upgrade",
    "df -h",
    "du -sh directory_name",
    "top",
    "htop",
    "ps aux",
    "kill process_id",
    "service apache2 restart",
    "systemctl start service_name",
    "journalctl -xe",
    "netstat -tuln",
    "ifconfig",
    "ip addr show",
    "route -n",
    "wget http://example.com/file.tar.gz",
    "curl -O http://example.com/file.tar.gz",
    "tar -xzf file.tar.gz",
    "zip -r archive.zip directory_name",
    "unzip archive.zip",
    "ssh user@hostname",
    "scp file.txt user@hostname:/path/to/destination",
    "rsync -avz /source/directory/ user@hostname:/destination/directory/",
    "crontab -e",
    "chmod +x script.sh",
    "./script.sh",
    "head -n 10 file.txt",
    "tail -f logfile.log",
    "sort filename.txt",
    "uniq sortedfile.txt",
    "wc -l filename.txt",
    "sed 's/old_text/new_text/g' inputfile.txt > outputfile.txt",
    "awk '{print $2}' datafile.txt",
    "cut -d ',' -f 3 file.csv",
    "tee outputfile.txt < inputfile.txt",
    "nohup command &",
    "ps aux | grep 'process_name'",
    "killall process_name",
    "useradd new_user",
    "passwd username",
    "groupadd groupname",
    "usermod -aG groupname username",
    "lastlog",
    "history | grep 'command'",
    "chmod 700 sensitive_file",
    "chown root:root critical_file",
    "sudo apt install package_name",
    "sudo apt remove package_name",
    "dpkg -l",
    "apt-cache search keyword",
    "nmcli device show",
    "ufw status verbose",
    "ufw enable",
    "ufw allow 22/tcp",
    "ufw deny 8080",
    "openssl genrsa -out private.key 2048",
    "openssl rsa -in private.key -pubout > public.key",
    "ssh-keygen -t rsa -b 4096 -C 'your_email@example.com'",
    "ssh-copy-id user@hostname",
    "curl ifconfig.me",
    "dig +short example.com",
    "nslookup example.com",
    "traceroute example.com",
    "ping -c 4 google.com",
    "whois example.com",
    "apt list --upgradable",
    "du -sh /var/log/* | sort -h",
    "lsof -i :80",
    "ss -tuln",
    "journalctl -u service_name",
    "systemctl status service_name",
    "lsblk",
    "fdisk -l",
    "parted -l",
    "mkfs.ext4 /dev/sdb1",
    "mount /dev/sdb1 /mnt",
    "umount /mnt",
    "cat /proc/cpuinfo",
    "free -h",
    "uptime",
    "w",
    "last",
    "vmstat 1 5",
    "iostat -x 1 5",
    "sar -u 1 5",
    "sar -d 1 5",
    "sar -n DEV 1 5",
    "sar -r 1 5",
    "sar -q 1 5",
    "sysctl -a",
    "sysctl vm.swappiness=10",
    "sudo reboot",
    "sudo shutdown -h now",
    "sudo poweroff",
    "echo 'export EDITOR=nano' >> ~/.bashrc",
    "source ~/.bashrc",
    "cat /etc/os-release",
    "uname -a",
    "dpkg-repack package_name",
    "apt-mark hold package_name",
    "apt-mark unhold package_name",
    "apt-get download package_name",
    "dpkg-deb -x package.deb extract_directory",
    "dpkg-deb -e package.deb extract_metadata",
    "dpkg-deb --build extract_directory",
    "dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz",
    "apt-ftparchive sources . | gzip -9c > Sources.gz",
    "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys KEY_ID",
    "gpg --import public_key.asc",
    "gpg --export --armor KEY_ID > public_key.asc",
    "openssl req -new -x509 -days 365 -nodes -out certificate.crt -key private.key",
    "openssl x509 -in certificate.crt -text -noout",
    "openssl s_client -connect example.com:443",
    "curl --cert certificate.pem --key key.pem https://example.com",
    "wget --certificate=certificate.pem --private-key=key.pem https://example.com",
    "ssh user@hostname -p 2222",
    "scp -P 2222 file.txt user@hostname:/path/to/destination",
    "rsync -avz -e 'ssh -p 2222' /source/directory/ user@hostname:/destination/directory/",
    "ufw allow 2222/tcp",
    "sed -i.bak 's/old_text/new_text/g' filename.txt",
    "awk '{print $1,$3}' datafile.txt | sort -k2,2n",
    "cut -d ',' -f 1,3 file.csv > newfile.csv",
    "tr 'a-z' 'A-Z' < inputfile.txt > outputfile.txt",
    "paste file1.txt file2.txt",
    "join -1 1 -2 1 file1.txt file2.txt",
    "diff file1.txt file2.txt",
    "comm -12 sortedfile1.txt sortedfile2.txt",
    "sort filename.txt | uniq -c | sort -nr",
    "awk '{sum += $1} END {print sum}' datafile.txt",
    "cut -d ',' -f 2 file.csv | awk '{total += $1} END {print total/NR}'",
    "cat /var/log/auth.log | grep 'Failed password' | wc -l",
    "grep -oP '(?<=pattern=)[^ ]+' file.txt",
    "sed '/pattern/d' inputfile.txt > outputfile.txt",
    "awk '{if ($1 == 'pattern') print $0}' datafile.txt",
    "cut -d ',' -f 3,4 | sort -k2,2n | head -n 10",
    "ls -l /etc | awk '$5 > 1000 {print $9}'",
    "grep 'pattern' *.txt | wc -l",
    "find /path/to/search -name '*.log' -mtime +7 -exec rm {} ;",
    "ps aux --sort=-%cpu | head -n 11",
    "du -sh /home/* | sort -h | tail -n 5",
    "netstat -tuln | grep LISTEN",
    "ifconfig eth0 down",
    "ip link set dev eth0 up",
    "route add default gw 192.168.1.1",
    "iptables -L -v -n",
    "iptables -A INPUT -p tcp --dport 22 -j ACCEPT",
    "ufw deny from 192.168.1.100",
    "openssl genrsa -out private.key 4096",
    "openssl rsa -in private.key -pubout > public.key",
    "ssh-keygen -t ed25519 -C 'your_email@example.com'",
    "scp -i /path/to/private_key file.txt user@hostname:/path/to/destination",
    "rsync -avz -e 'ssh -i /path/to/private_key' /source/directory/ user@hostname:/destination/directory/",
    "ufw allow from 192.168.1.0/24 to any port 22",
    "sed 's/^/#/' inputfile.txt > commented_out_file.txt",
    "awk '$2 == 'value' {print $3}' datafile.txt",
    "cut -d ',' -f 2,3 | sort -k1,1r | uniq",
    "tr '[:upper:]' '[:lower:]' < inputfile.txt > outputfile.txt",
    "paste -sd ',' file1.txt file2.txt",
    "join -1 1 -2 1 -e 'N/A' -o 0 1.2 2.3 file1.txt file2.txt",
    "diff --side-by-side file1.txt file2.txt",
    "comm -13 sortedfile1.txt sortedfile2.txt",
    "sort filename.txt | uniq -c | sort -k1,1nr | head -n 5",
    "awk '{total += $1} END {print total/NR}' datafile.txt",
    "cut -d ',' -f 2 file.csv | awk '{sum += $1} END {print sum}'",
    "cat /var/log/auth.log | grep 'sshd' | wc -l",
    "grep -oP '(?<=key=)[^ ]+' file.txt",
    "sed '/pattern/c\\New line' inputfile.txt > outputfile.txt",
    "awk '$1 == 'pattern' {print $2}' datafile.txt",
    "cut -d ',' -f 3,4 | sort -k1,1n | tail -n 5",
    "ls -l /etc | awk '$5 < 500 {print $9}'",
    "grep 'pattern' *.txt | wc -l",
    "find /path/to/search -name '*.log' -size +1M -exec rm {} ;",
    "ps aux --sort=-%mem | head -n 11",
    "du -sh /var/* | sort -h | head -n 5",
    "netstat -tuln | grep LISTEN",
    "ifconfig eth0 down",
    "ip link set dev eth0 up",
    "route add default gw 192.168.1.1",
    "iptables -L -v -n",
    "iptables -A INPUT -p tcp --dport 80 -j ACCEPT",
    "ufw deny from 192.168.1.100",
    "openssl genrsa -out private.key 4096",
    "openssl rsa -in private.key -pubout > public.key",
    "ssh-keygen -t ed25519 -C 'your_email@example.com'",
    "scp -i /path/to/private_key file.txt user@hostname:/path/to/destination",
    "rsync -avz -e 'ssh -i /path/to/private_key' /source/directory/ user@hostname:/destination/directory/",
    "ufw allow from 192.168.1.0/24 to any port 22",
    "print('Hello World')",
    "# This is a comment",
    "x = 5",
    "y = 10",
    "z = x + y",
    "if z == 15:",
    "    print('Correct')",
    "else:",
    "    print('Incorrect')",
    "for i in range(10):",
    "    print(i)",
    "while True:",
    "    break",
    "def my_function():",
    "    return 'Hello'",
    "my_function()",
    "class MyClass:",
    "    pass",
    "obj = MyClass()",
    "[1, 2, 3]",
    "(1, 2, 3)",
    "{1, 2, 3}",
    "{'key': 'value'}",
    "len([1, 2, 3])",
    "max(5, 10)",
    "min(5, 10)",
    "sum([1, 2, 3])",
    "abs(-5)",
    "round(3.7)",
    "type(5)",
    "str(5)",
    "int('5')",
    "float(5)",
    "bool(0)",
    "list(range(5))",
    "tuple([1, 2, 3])",
    "set([1, 2, 3])",
    "dict(key='value')",
    "input('Enter something: ')",
    "open('file.txt', 'r')",
    "readlines()",
    "write('Hello World')",
    "append('new line')",
    "pop(0)",
    "remove('item')",
    "clear()",
    "extend([1, 2, 3])",
    "insert(0, 'item')",
    "count('item')",
    "index('item')",
    "sort()",
    "reverse()",
    "copy()",
    "keys()",
    "values()",
    "items()",
    "get('key')",
    "pop('key')",
    "update({'new_key': 'new_value'})",
    "clear()",
    "join(['a', 'b', 'c'])",
    "split(' ')",
    "strip()",
    "replace('old', 'new')",
    "lower()",
    "upper()",
    "capitalize()",
    "title()",
    "isalpha()",
    "isdigit()",
    "isalnum()",
    "isspace()",
    "startswith('prefix')",
    "endswith('suffix')",
    "format(5)",
    "f'Formatted {var}'",
    "r'Raw string'",
    "b'Byte string'",
    "u'Unicode string'",
    "r'\n'",
    "b'\x41'",
    "ord('A')",
    "chr(65)",
    "bytes([72, 101, 108, 108, 111])",
    "bytearray([72, 101, 108, 108, 111])",
    "memoryview(b'hello')",
    "complex(3, 4)",
    "float('inf')",
    "float('-inf')",
    "float('nan')",
    "isinstance(5, int)",
    "issubclass(int, float)",
    "hasattr(obj, 'attribute')",
    "getattr(obj, 'attribute', 'default')",
    "setattr(obj, 'attribute', 'value')",
    "delattr(obj, 'attribute')",
    "__name__",
    "__file__",
    "__doc__",
    "__version__",
    "__author__",
    "sys.exit()",
    "os.getcwd()",
    "math.sqrt(16)",
    "random.randint(1, 10)",
    "datetime.now()",
    "time.sleep(2)",
    "json.dumps({'key': 'value'})",
    "json.loads('{'key': 'value'}')",
    "csv.reader(open('file.csv'))",
    "csv.writer(open('file.csv', 'w'))",
    "pandas.read_csv('file.csv')",
    "numpy.array([1, 2, 3])",
    "matplotlib.pyplot.plot([1, 2, 3])",
    "seaborn.scatterplot(x=[1, 2, 3], y=[4, 5, 6])",
    "scikit_learn.metrics.accuracy_score(y_true, y_pred)",
    "tensorflow.keras.models.Sequential()",
    "pytorch.nn.Linear(in_features=10, out_features=1)",
    "flask.Flask(__name__)",
    "django.views.generic.View",
    "asyncio.run(main())",
    "aiohttp.ClientSession()",
    "motor.motor_asyncio.AsyncIOMotorClient()",
    "pytest.main(['test_module.py'])",
    "unittest.TestCase",
    "selenium.webdriver.Chrome()",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame({'A': [1, 2], 'B': [3, 4]})",
    "numpy.zeros((3, 3))",
    "matplotlib.pyplot.imshow(image)",
    "seaborn.heatmap(data)",
    "scikit_learn.preprocessing.StandardScaler()",
    "tensorflow.keras.layers.Dense(64, activation='relu')",
    "pytorch.nn.Conv2d(in_channels=1, out_channels=1, kernel_size=3)",
    "flask.request.method",
    "django.http.HttpResponse('Hello World')",
    "asyncio.create_task(coroutine())",
    "aiohttp.ClientSession().get(url)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'})",
    "pytest.mark.parametrize('x', [1, 2, 3])",
    "unittest.mock.Mock()",
    "selenium.webdriver.Firefox()",
    "beautifulsoup4.BeautifulSoup(html, 'lxml')",
    "pandas.read_excel('file.xlsx')",
    "numpy.ones((3, 3))",
    "matplotlib.pyplot.bar(['A', 'B'], [10, 20])",
    "seaborn.pairplot(data)",
    "scikit_learn.cluster.KMeans(n_clusters=3)",
    "tensorflow.keras.optimizers.Adam(learning_rate=0.001)",
    "pytorch.nn.Dropout(p=0.5)",
    "flask.url_for('view_func')",
    "django.urls.path(route, view_func)",
    "asyncio.sleep(2)",
    "aiohttp.ClientSession().post(url, data=data)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.insert_one({'key': 'value'})",
    "pytest.mark.skip(reason='Not implemented yet')",
    "unittest.mock.patch('module.Class')",
    "selenium.webdriver.Edge()",
    "beautifulsoup4.BeautifulSoup(html, 'html5lib')",
    "pandas.DataFrame.from_dict(data)",
    "numpy.full((3, 3), 7)",
    "matplotlib.pyplot.pie([10, 20, 30], labels=['A', 'B', 'C'])",
    "seaborn.violinplot(x=data['x'], y=data['y'])",
    "scikit_learn.decomposition.PCA(n_components=2)",
    "tensorflow.keras.applications.VGG16()",
    "pytorch.nn.Embedding(num_embeddings=10, embedding_dim=3)",
    "flask.redirect(url_for('view_func'))",
    "django.shortcuts.render(request, 'template.html')",
    "asyncio.Queue()",
    "aiohttp.ClientSession().put(url, data=data)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.update_one({'key': 'value'}, {'$set': {'new_key': 'new_value'}})",
    "pytest.mark.xfail(reason='Expected to fail')",
    "unittest.mock.MagicMock()",
    "selenium.webdriver.Safari()",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_csv('file.csv')",
    "numpy.random.randint(0, 10, (3, 3))",
    "matplotlib.pyplot.hist(data)",
    "seaborn.jointplot(x=data['x'], y=data['y'])",
    "scikit_learn.ensemble.RandomForestClassifier()",
    "tensorflow.keras.losses.CategoricalCrossentropy()",
    "pytorch.nn.BCELoss()",
    "flask.abort(404)",
    "django.http.Http404",
    "asyncio.Lock()",
    "aiohttp.ClientSession().delete(url)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.delete_one({'key': 'value'})",
    "pytest.mark.filterwarnings('ignore::DeprecationWarning')",
    "unittest.mock.patch.object(obj, 'method')",
    "selenium.webdriver.ChromeOptions()",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.read_json('file.json')",
    "numpy.random.normal(0, 1, (3, 3))",
    "matplotlib.pyplot.scatter(x, y)",
    "seaborn.countplot(x=data['x'])",
    "scikit_learn.feature_extraction.text.TfidfVectorizer()",
    "tensorflow.keras.metrics.AUC()",
    "pytorch.nn.MSELoss()",
    "flask.Blueprint('name', __name__)",
    "django.views.generic.TemplateView.as_view(template_name='template.html')",
    "asyncio.Semaphore(10)",
    "aiohttp.ClientSession().patch(url, data=data)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.replace_one({'key': 'value'}, {'new_key': 'new_value'})",
    "pytest.mark.timeout(5)",
    "unittest.mock.patch.dict('module.dict', key='value')",
    "selenium.webdriver.DesiredCapabilities.CHROME",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_excel('file.xlsx')",
    "numpy.random.uniform(0, 1, (3, 3))",
    "matplotlib.pyplot.boxplot(data)",
    "seaborn.heatmap(correlation_matrix, annot=True)",
    "scikit_learn.model_selection.GridSearchCV()",
    "tensorflow.keras.callbacks.ModelCheckpoint()",
    "pytorch.nn.Sigmoid()",
    "flask.Flask(__name__, static_url_path='/static')",
    "django.middleware.csrf.CsrfViewMiddleware",
    "asyncio.Event()",
    "aiohttp.ClientSession().options(url)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.aggregate(pipeline)",
    "pytest.mark.parametrize('x, y', [(1, 2), (3, 4)])",
    "unittest.mock.patch.object(obj, 'method').return_value",
    "selenium.webdriver.Chrome(desired_capabilities=capabilities)",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_dict(orient='records')",
    "numpy.random.exponential(scale=1.0, size=(3, 3))",
    "matplotlib.pyplot.errorbar(x, y, yerr=yerr)",
    "seaborn.lineplot(data=data)",
    "scikit_learn.svm.SVC()",
    "tensorflow.keras.losses.MeanSquaredError()",
    "pytorch.nn.ReLU()",
    "flask.g",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "asyncio.Queue(maxsize=10)",
    "aiohttp.ClientSession().head(url)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.bulk_write(operations)",
    "pytest.mark.parametrize('param', [1, 2], ids=['id1', 'id2'])",
    "unittest.mock.patch.object(obj, 'method').side_effect",
    "selenium.webdriver.Chrome(options=options)",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_sql(name='table_name', con=engine)",
    "numpy.random.binomial(n=10, p=0.5, size=(3, 3))",
    "matplotlib.pyplot.stem(x, y)",
    "seaborn.barplot(x=data['x'], y=data['y'])",
    "scikit_learn.decomposition.SVD()",
    "tensorflow.keras.optimizers.SGD(learning_rate=0.01)",
    "pytorch.nn.Dropout2d(p=0.5)",
    "flask.render_template('template.html', variable=value)",
    "django.middleware.common.CommonMiddleware",
    "asyncio.CancelledError",
    "aiohttp.ClientSession().close()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find({'key': 'value'})",
    "pytest.mark.parametrize('param', [1, 2], indirect=True)",
    "unittest.mock.patch.object(obj, 'method').assert_called_once_with(arg1, arg2)",
    "selenium.webdriver.Chrome(service_log_path='path')",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_parquet('file.parquet')",
    "numpy.random.poisson(lam=5, size=(3, 3))",
    "matplotlib.pyplot.step(x, y)",
    "seaborn.pointplot(data=data)",
    "scikit_learn.preprocessing.MinMaxScaler()",
    "tensorflow.keras.applications.ResNet50()",
    "pytorch.nn.Upsample(scale_factor=2)",
    "flask.request.args.get('param')",
    "django.middleware.security.SecurityMiddleware",
    "asyncio.wait_for(future, timeout=5)",
    "aiohttp.ClientSession().ws_connect(url)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.aggregate([{'$match': {'key': 'value'}}])",
    "pytest.mark.parametrize('param', [1, 2], ids=lambda x: f'id{x}')",
    "unittest.mock.patch.object(obj, 'method').assert_called_with(arg1, arg2)",
    "selenium.webdriver.Chrome(executable_path='path')",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_markdown()",
    "numpy.random.power(a=5, size=(3, 3))",
    "matplotlib.pyplot.violinplot(data)",
    "seaborn.swarmplot(x=data['x'], y=data['y'])",
    "scikit_learn.ensemble.AdaBoostClassifier()",
    "tensorflow.keras.layers.Embedding(input_dim=1000, output_dim=64)",
    "pytorch.nn.ConvTranspose2d(in_channels=3, out_channels=1, kernel_size=3)",
    "flask.request.form.get('param')",
    "django.middleware.transaction.TransactionMiddleware",
    "asyncio.TimeoutError",
    "aiohttp.ClientSession().fetch(url)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, projection={'_id': 0})",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: True if x == 1 else False)",
    "unittest.mock.patch.object(obj, 'method').assert_called_once()",
    "selenium.webdriver.Chrome(service=Service('path'))",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_csv('file.csv', index=False)",
    "numpy.random.zipf(a=2.0, size=(3, 3))",
    "matplotlib.pyplot.scatter(x, y, c='blue')",
    "seaborn.boxplot(data=data)",
    "scikit_learn.cluster.DBSCAN()",
    "tensorflow.keras.models.load_model('model.h5')",
    "pytorch.nn.GRU(input_size=10, hidden_size=20)",
    "flask.redirect(url_for('view_func', param=value))",
    "django.middleware.locale.LocaleMiddleware",
    "asyncio.CancelledError()",
    "aiohttp.ClientSession().post(url, json=data)",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, sort=[('field', 1)])",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x})",
    "unittest.mock.patch.object(obj, 'method').assert_called()",
    "selenium.webdriver.Chrome(options=options, service=Service('path'))",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_excel('file.xlsx', index=False)",
    "numpy.random.chisquare(df=2, size=(3, 3))",
    "matplotlib.pyplot.errorbar(x, y, xerr=xerr)",
    "seaborn.stripplot(data=data)",
    "scikit_learn.ensemble.GradientBoostingClassifier()",
    "tensorflow.keras.applications.MobileNetV2()",
    "pytorch.nn.LSTM(input_size=10, hidden_size=20)",
    "flask.Blueprint('name', __name__, url_prefix='/prefix')",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "asyncio.get_event_loop().run_until_complete(main())",
    "aiohttp.ClientSession().delete(url).json()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, limit=1)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if x == 1 else None)",
    "unittest.mock.patch.object(obj, 'method').assert_not_called()",
    "selenium.webdriver.Chrome(desired_capabilities=capabilities, options=options)",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_json(orient='records')",
    "numpy.random.f(dfnum1=2, dfden1=5, size=(3, 3))",
    "matplotlib.pyplot.polar(theta, r)",
    "seaborn.factorplot(x='x', y='y', data=data)",
    "scikit_learn.preprocessing.LabelEncoder()",
    "tensorflow.keras.optimizers.RMSprop(learning_rate=0.001)",
    "pytorch.nn.MaxPool2d(kernel_size=2)",
    "flask.g.user = User.get(id)",
    "django.middleware.common.CommonMiddleware",
    "asyncio.Queue(maxsize=None)",
    "aiohttp.ClientSession().options(url).text()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, hint='index')",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if isinstance(x, int) else None)",
    "unittest.mock.patch.object(obj, 'method').assert_called_once_with(arg1, arg2)",
    "selenium.webdriver.Chrome(service_log_path='path', options=options)",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_sql(name='table_name', con=engine, if_exists='replace')",
    "numpy.random.geometric(p=0.5, size=(3, 3))",
    "matplotlib.pyplot.hist(data, bins=10)",
    "seaborn.pairplot(data=data)",
    "scikit_learn.feature_selection.SelectKBest()",
    "tensorflow.keras.models.Sequential()",
    "pytorch.nn.AdaptiveAvgPool2d(output_size=(1, 1))",
    "flask.request.files.get('file')",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "asyncio.Queue(maxsize=5)",
    "aiohttp.ClientSession().get(url).json()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, allow_partial_results=True)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if isinstance(x, int) else {'key': None})",
    "unittest.mock.patch.object(obj, 'method').assert_called_with(arg1, arg2)",
    "selenium.webdriver.Chrome(options=options, service=Service('path'))",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_markdown(index=False)",
    "numpy.random.gumbel(loc=0.0, scale=1.0, size=(3, 3))",
    "matplotlib.pyplot.fill_between(x, y1, y2)",
    "seaborn.jointplot(data=data)",
    "scikit_learn.decomposition.TruncatedSVD()",
    "tensorflow.keras.applications.DenseNet121()",
    "pytorch.nn.BatchNorm2d(num_features=10)",
    "flask.Blueprint('name', __name__, static_folder='static')",
    "django.middleware.security.SecurityMiddleware",
    "asyncio.Queue(maxsize=0)",
    "aiohttp.ClientSession().post(url, data=data).text()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, no_cursor_timeout=True)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if x > 0 else None)",
    "unittest.mock.patch.object(obj, 'method').assert_not_called()",
    "selenium.webdriver.Chrome(desired_capabilities=capabilities, options=options, service=Service('path'))",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_csv('file.csv', sep=';')",
    "numpy.random.laplace(loc=0.0, scale=1.0, size=(3, 3))",
    "matplotlib.pyplot.scatter(x, y, c='red', s=50)",
    "seaborn.kdeplot(data=data)",
    "scikit_learn.cluster.KMeans()",
    "tensorflow.keras.optimizers.Adam(learning_rate=0.001)",
    "pytorch.nn.Conv3d(in_channels=1, out_channels=16, kernel_size=3)",
    "flask.request.args.getlist('param')",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "asyncio.Queue(maxsize=-1)",
    "aiohttp.ClientSession().patch(url, json=data).json()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, max_time_ms=5000)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if isinstance(x, int) else None)",
    "unittest.mock.patch.object(obj, 'method').assert_called_with(arg1, arg2)",
    "selenium.webdriver.Chrome(options=options, service_log_path='path')",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_excel('file.xlsx', sheet_name='Sheet1')",
    "numpy.random.exponential(scale=1.0, size=(3, 3))",
    "matplotlib.pyplot.pie(sizes, labels=labels)",
    "seaborn.lmplot(data=data)",
    "scikit_learn.ensemble.RandomForestClassifier()",
    "tensorflow.keras.applications.VGG16(weights='imagenet')",
    "pytorch.nn.AdaptiveMaxPool2d(output_size=(1, 1))",
    "flask.Blueprint('name', __name__, url_prefix='/prefix', static_folder='static')",
    "django.middleware.common.CommonMiddleware",
    "asyncio.Queue(maxsize=10)",
    "aiohttp.ClientSession().get(url).text()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, batch_size=10)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if isinstance(x, int) else None)",
    "unittest.mock.patch.object(obj, 'method').assert_called_once()",
    "selenium.webdriver.Chrome(desired_capabilities=capabilities, options=options, service_log_path='path')",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_markdown(index=False, mode='at', path_or_buf='file.md')",
    "numpy.random.lognormal(mean=0.0, sigma=1.0, size=(3, 3))",
    "matplotlib.pyplot.errorbar(x, y, xerr=xerr, fmt='-o')",
    "seaborn.catplot(data=data)",
    "scikit_learn.feature_selection.SelectFromModel()",
    "tensorflow.keras.models.save_model(model, 'model.h5')",
    "pytorch.nn.Dropout3d(p=0.5)",
    "flask.Blueprint('name', __name__, url_prefix='/prefix', static_folder='static', template_folder='templates')",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "asyncio.Queue(maxsize=0, loop=None)",
    "aiohttp.ClientSession().options(url).json()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, read_preference=ReadPreference.PRIMARY)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if x in range(1, 3) else None)",
    "unittest.mock.patch.object(obj, 'method').assert_called_with(arg1, arg2)",
    "selenium.webdriver.Chrome(options=options, service=Service('path'))",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_csv('file.csv', header=False)",
    "numpy.random.negative_binomial(n=10, p=0.5, size=(3, 3))",
    "matplotlib.pyplot.scatter(x, y, c='green', alpha=0.7)",
    "seaborn.jointplot(data=data, kind='hex')",
    "scikit_learn.decomposition.PCA()",
    "tensorflow.keras.applications.InceptionV3(weights=None)",
    "pytorch.nn.Linear(in_features=10, out_features=20)",
    "flask.request.form.getlist('param')",
    "django.middleware.security.SecurityMiddleware",
    "asyncio.Queue(maxsize=-1, loop=None)",
    "aiohttp.ClientSession().patch(url, data=data).text()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, session=session)",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if isinstance(x, int) else None)",
    "unittest.mock.patch.object(obj, 'method').assert_called_once_with(arg1, arg2)",
    "selenium.webdriver.Chrome(desired_capabilities=capabilities, service_log_path='path')",
    "beautifulsoup4.BeautifulSoup(html, 'html.parser')",
    "pandas.DataFrame.to_excel('file.xlsx', engine='xlsxwriter')",
    "numpy.random.standard_t(df=5, size=(3, 3))",
    "matplotlib.pyplot.errorbar(x, y, xerr=xerr, fmt='-o', ecolor='r', elinewidth=2)",
    "seaborn.factorplot(data=data, col='col_var')",
    "scikit_learn.feature_selection.RFE()",
    "tensorflow.keras.models.load_model('model.h5', compile=False)",
    "pytorch.nn.Embedding(num_embeddings=1000, embedding_dim=64)",
    "flask.Blueprint('name', __name__, url_prefix='/prefix', static_folder='static', template_folder='templates', subdomain='sub')",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "asyncio.Queue(maxsize=10, loop=None)",
    "aiohttp.ClientSession().post(url).json()",
    "motor.motor_asyncio.AsyncIOMotorClient().mydb.mycol.find_one({'key': 'value'}, read_concern={'level': 'local'})",
    "pytest.mark.parametrize('param', [1, 2], indirect=lambda x: {'key': x} if isinstance(x, int) else None)",
    "unittest.mock.patch.object(obj, 'method').assert_called_with(arg1, arg2)",
    "singularity",
    "quantum",
    "entanglement",
    "superposition",
    "wormhole",
    "event_horizon",
    "spacetime",
    "relativity",
    "gravitational_wave",
    "dark_matter",
    "dark_energy",
    "multiverse",
    "cosmic_string",
    "black_hole",
    "neutron_star",
    "redshift",
    "blueshift",
    "exoplanet",
    "astrophysics",
    "cosmology",
    "stellar_dynamics",
    "accretion_disk",
    "chroniton",
    "tachyon",
    "exotic_matter",
    "vacuum_energy",
    "zero_point_energy",
    "planck_length",
    "planck_time",
    "brane",
    "cosmic_microwave_background",
    "Hawking_radiation",
    "curvature",
    "inflation",
    "Big_Bang",
    "Big_Crunch",
    "Big_Rip",
    "galaxy",
    "nebula",
    "supernova",
    "pulsar",
    "quasar",
    "void",
    "celestial_mechanics",
    "stellar_evolution",
    "astrobiology",
    "particle_horizon",
    "event_horizon",
    "time_dilation",
    "length_contraction",
    "lorentz_transformation",
    "spacetime_continuum",
    "stochasticity",
    "ergosphere",
    "frame_dragging",
    "cosmic_radiation",
    "graviton",
    "hadron",
    "lepton",
    "boson",
    "fermion",
    "quantum_foam",
    "false_vacuum",
    "true_vacuum",
    "scalar_field",
    "axion",
    "string_theory",
    "M-theory",
    "Calabi_Yau_manifold",
    "landscape",
    "chronometry",
    "temporal_paradox",
    "causality",
    "retrocausality",
    "parallel_universe",
    "alternate_reality",
    "dimension",
    "hyperdimension",
    "dimensional_rift",
    "extradimensional",
    "transdimensional",
    "transcension",
    "cosmic_web",
    "dark_flow",
    "void_space",
    "psychohistory",
    "noosphere",
    "collective_unconscious",
    "hive_mind",
    "technocracy",
    "dystopia",
    "utopia",
    "ecumenopolis",
    "planetary_government",
    "galactic_empire",
    "federation",
    "confederation",
    "oligarchy",
    "benevolent_dictatorship",
    "social_engineering",
    "cultural_assimilation",
    "genetic_purification",
    "eugenics",
    "transhumanism",
    "posthumanism",
    "artificial_intelligence",
    "sentient_robot",
    "virtual_reality",
    "simulacrum",
    "cyberspace",
    "information_hierarchy",
    "data_stream",
    "cognitive_enhancement",
    "neural_interface",
    "mind_uploading",
    "digital_consciousness",
    "singularity_event",
    "technological_ascension",
    "genetic_algorithm",
    "memetic_engineering",
    "social_darwinism",
    "xenophobia",
    "xenophilia",
    "cultural_relativism",
    "first_contact",
    "interstellar_relations",
    "galactic_politics",
    "warfare",
    "armistice",
    "treaty",
    "sanctions",
    "blockade",
    "occupation",
    "resistance",
    "insurrection",
    "revolution",
    "propaganda",
    "censorship",
    "surveillance",
    "social_control",
    "totalitarianism",
    "authoritarianism",
    "anarchy",
    "libertarianism",
    "collectivism",
    "individualism",
    "conformity",
    "deviance",
    "alienation",
    "hegemony",
    "ideology",
    "utopianism",
    "dystopianism",
    "transcendence",
    "post_scarcity",
    "resource_management",
    "population_control",
    "environmental_collapse",
    "planetary_defense",
    "stellar_migration",
    "terraforming",
    "colonization",
    "settler",
    "pioneer",
    "refugee",
    "exile",
    "nomad",
    "vagrant",
    "outcast",
    "dissident",
    "nanotechnology",
    "artificial_intelligence",
    "virtual_reality",
    "augmented_reality",
    "cybernetics",
    "bionics",
    "prosthetics",
    "neural_interface",
    "brain_computer_interface",
    "quantum_computing",
    "fusion_power",
    "antimatter_reactor",
    "warp_drive",
    "hyperspace",
    "ftl_communication",
    "subspace",
    "tachyon_transmission",
    "energy_shield",
    "force_field",
    "cloaking_device",
    "invisibility",
    "holography",
    "matter_replicator",
    "fabricator",
    "3d_printing",
    "assembler",
    "disassembler",
    "terraforming_equipment",
    "atmosphere_processor",
    "gravity_control",
    "inertia_dampener",
    "stasis_field",
    "cryosleep",
    "hibernation",
    "genetic_engineering",
    "cloning",
    "bioweapon",
    "cybernetic_organism",
    "synthetic_biology",
    "robotics",
    "android",
    "drone",
    "autonomous_vehicle",
    "spacecraft",
    "starship",
    "battleship",
    "cruiser",
    "destroyer",
    "fighter",
    "shuttle",
    "lander",
    "orbital_station",
    "space_elevator",
    "planetary_shield",
    "defense_grid",
    "sensor_array",
    "communications_satellite",
    "advanced_materials",
    "composites",
    "alloys",
    "ceramics",
    "exotic_alloys",
    "self_repairing_materials",
    "adaptive_armor",
    "energy_weapons",
    "laser",
    "plasma_rifle",
    "particle_beam",
    "railgun",
    "kinetic_weapon",
    "antigravity_platform",
    "personal_shield",
    "exoskeleton",
    "powered_armor",
    "biosuit",
    "environmental_suit",
    "psionic_amplifier",
    "mental_interface",
    "telepathic_device",
    "telekinetic_device",
    "cognitive_enhancer",
    "memory_implant",
    "neural_stimulator",
    "sensory_deprivation",
    "virtual_environment",
    "xenoarcheology",
    "xenobiology",
    "extraterrestrial",
    "alien_artifact",
    "sentient_species",
    "non_corporeal",
    "collective_intelligence",
    "hive_consciousness",
    "symbiotic_relationship",
    "parasitic_entity",
    "bio_luminescence",
    "exo_skeleton",
    "endoskeleton",
    "chitin",
    "tentacle",
    "pseudopod",
    "bio_engineered",
    "genetic_drift",
    "adaptation",
    "mutation",
    "evolutionary_leap",
    "interstellar_migration",
    "planetary_domination",
    "cosmic_horror",
    "eldritch_abomination",
    "ancient_ones",
    "great_old_ones",
    "non_euclidean_geometry",
    "shoggoth",
    "mi_go",
    "cthulhu",
    "starspawn",
    "deep_ones",
    "elder_things",
    "precursor_race",
    "forgotten_gods",
    "alien_hive",
    "dimensional_being",
    "transcendent_entity",
    "energy_being",
    "psionic_entity",
    "telepathic_species",
    "shape_shifter",
    "metamorphosis",
    "biomorph",
    "xenomorph",
    "symbiont",
    "parasite",
    "host",
    "infestation",
    "assimilation",
    "bioweapon",
    "genetic_weapon",
    "nanobots",
    "viral_agent",
    "bacterial_infection",
    "plague",
    "epidemic",
    "pandemic",
    "extinction_event",
    "biosphere",
    "ecosystem",
    "planetary_environment",
    "terraforming",
    "atmospheric_composition",
    "oxygen_cycle",
    "water_cycle",
    "nutrient_cycle",
    "energy_flow",
    "time_travel",
    "parallel_dimensions",
    "alternate_reality",
    "wormhole",
    "singularity",
    "ftl_drive",
    "hyperspace",
    "space_exploration",
    "planetary_colonization",
    "first_contact",
    "galactic_war",
    "artificial_intelligence",
    "robot_uprising",
    "sentient_machine",
    "virtual_reality",
    "simulated_reality",
    "cyberspace",
    "dystopian_future",
    "utopian_society",
    "genetic_engineering",
    "cloning",
    "mutations",
    "psionic_powers",
    "telepathy",
    "telekinesis",
    "mind_control",
    "energy_weapons",
    "force_fields",
    "cloaking_devices",
    "space_battles",
    "alien_invasion",
    "extinction_event",
    "apocalypse",
    "salvation",
    "redemption",
    "sacrifice",
    "discovery",
    "exploration",
    "consciousness",
    "reality",
    "perception",
    "knowledge",
    "truth",
    "illusion",
    "fate",
    "destiny",
    "time_loop",
    "temporal_paradox",
    "multiverse",
    "dimensional_rift",
    "quantum_entanglement",
    "superposition",
    "spacetime_continuum",
    "event_horizon",
    "black_hole",
    "neutron_star",
    "cosmic_string",
    "zero_gravity",
    "cryosleep",
    "hibernation",
    "terraforming",
    "exoplanet",
    "nebula",
    "supernova",
    "pulsar",
    "quasar",
    "void_space",
    "rogue_planet",
    "stellar_nursery",
    "accretion_disk",
    "gravitational_wave",
    "dark_matter",
    "dark_energy",
    "cosmic_radiation",
    "chroniton",
    "tachyon",
    "exotic_matter",
    "brane",
    "cosmic_microwave_background",
    "Hawking_radiation",
    "curvature",
    "inflation",
    "Big_Bang",
    "Big_Crunch",
    "Big_Rip",
    "galaxy",
    "void",
    "celestial_mechanics",
    "stellar_evolution",
    "astrobiology",
    "particle_horizon",
    "time_dilation",
    "length_contraction",
    "lorentz_transformation",
    "spacetime_continuum",
    "stochasticity",
    "ergosphere",
    "frame_dragging",
    "cosmic_radiation",
    "graviton",
    "hadron",
    "lepton",
    "boson",
    "fermion",
    "quantum_foam",
    "false_vacuum",
    "true_vacuum",
    "scalar_field",
    "axion",
    "string_theory",
    "M-theory",
    "Calabi_Yau_manifold",
    "landscape",
    "chronometry",
    "temporal_paradox",
    "causality",
    "retrocausality",
    "parallel_universe",
    "alternate_reality",
    "dimension",
    "hyperdimension",
    "dimensional_rift",
    "extradimensional",
    "transdimensional",
    "transcension",
    "cosmic_web",
    "dark_flow",
    "void_space",
    "Terminator",
    "Cyberdyne",
    "Skynet",
    "T-800",
    "T-1000",
    "JohnConnor",
    "SarahConnor",
    "KyleReese",
    "Resistance",
    "JudgmentDay",
    "TimeTravel",
    "LiquidMetal",
    "NeuralNet",
    "CPU",
    "Microprocessor",
    "ArtificialIntelligence",
    "Robot",
    "Android",
    "Automaton",
    "Machine",
    "Future",
    "Past",
    "Present",
    "Chronological",
    "Paradox",
    "Destiny",
    "Fate",
    "Infiltration",
    "Assassination",
    "Elimination",
    "Target",
    "Protection",
    "Defensive",
    "Offensive",
    "Combat",
    "Weapon",
    "Firearm",
    "Shotgun",
    "Pistol",
    "Rifle",
    "Grenade",
    "Explosive",
    "Demolitions",
    "Tactical",
    "Strategy",
    "Protocol",
    "System",
    "Override",
    "Security",
    "Database",
    "Network",
    "Communication",
    "Signal",
    "Interference",
    "Jamming",
    "Encryption",
    "Decryption",
    "Data",
    "Information",
    "Analysis",
    "Algorithm",
    "Programming",
    "Code",
    "Software",
    "Hardware",
    "Circuitry",
    "Electronics",
    "Power",
    "Energy",
    "Battery",
    "Generator",
    "Reactor",
    "Fusion",
    "Plasma",
    "Laser",
    "Infrared",
    "Sensor",
    "Detection",
    "Surveillance",
    "Monitoring",
    "Scanning",
    "Tracking",
    "Location",
    "Movement",
    "Velocity",
    "Acceleration",
    "Impact",
    "Force",
    "Structure",
    "Metal",
    "Alloy",
    "Titanium",
    "Steel",
    "Chrome",
    "CarbonFiber",
    "Skeleton",
    "Endoskeleton",
    "Hydraulic",
    "Pneumatic",
    "Motor",
    "Joint",
    "Articulation",
    "Flexibility",
    "Mobility",
    "Agility",
    "Strength",
    "Durability",
    "Resilience",
    "Repair",
    "Maintenance",
    "Upgrade",
    "Modification",
    "Reconstruction",
    "Damage",
    "Destruction",
    "Fragmentation",
    "Debris",
    "Scrap",
    "Vehicle",
    "Automobile",
    "Motorcycle",
    "Truck",
    "Helicopter",
    "Aircraft",
    "Chase",
    "Pursuit",
    "Escape",
    "Interception",
    "Collision",
    "Crash",
    "Explosion",
    "Fire",
    "Smoke",
    "DebrisField",
    "Urban",
    "Cityscape",
    "Industrial",
    "Factory",
    "Warehouse",
    "PowerPlant",
    "MilitaryBase",
    "PoliceStation",
    "Hospital",
    "Laboratory",
    "ResearchFacility",
    "Underground",
    "Tunnel",
    "Sewer",
    "Subway",
    "Desert",
    "Mountains",
    "Forest",
    "River",
    "Ocean",
    "Sky",
    "Weather",
    "Rain",
    "Snow",
    "Wind",
    "Storm",
    "Night",
    "Day",
    "Dawn",
    "Dusk",
    "Twilight",
    "Shadow",
    "Light",
    "Heat",
    "Cold",
    "Temperature",
    "Atmosphere",
    "Environment",
    "Ecology",
    "Wildlife",
    "Flora",
    "Fauna",
    "Terrain",
    "Landscape",
    "Geology",
    "Meteorology",
    "Astronomy",
    "Cosmos",
    "Universe",
    "Galaxy",
    "Star",
    "Planet",
    "Moon",
    "Sun",
    "Orbit",
    "Rotation",
    "Revolution",
    "Gravity",
    "Space",
    "Time",
    "Dimension",
    "Reality",
    "Illusion",
    "Perception",
    "Consciousness",
    "Memory",
    "Dream",
    "Vision",
    "Hallucination",
    "Neurotransmitter",
    "Synapse",
    "Brain",
    "NervousSystem",
    "Muscle",
    "Bone",
    "Tissue",
    "Cell",
    "DNA",
    "Genome",
    "Evolution",
    "Mutation",
    "Adaptation",
    "Survival",
    "Instinct",
    "Predator",
    "Prey",
    "Hunter",
    "TargetAcquisition",
    "Engagement",
    "Suppression",
    "Neutralization",
    "Containment",
    "Isolation",
    "Quarantine",
    "Exposure",
    "Contamination",
    "Infection",
    "Virus",
    "Bacteria",
    "Pathogen",
    "Antibody",
    "Immunity",
    "ResistanceMovement",
    "UndergroundNetwork",
    "FreedomFighter",
    "Rebel",
    "Guerrilla",
    "Sabotage",
    "Insurrection",
    "Revolutionary",
    "Oppression",
    "Tyranny",
    "Control",
    "Authority",
    "Government",
    "PoliceForce",
    "MilitaryPersonnel",
    "Soldier",
    "Commander",
    "Officer",
    "Corporation",
    "Executive",
    "Scientist",
    "Engineer",
    "Technician",
    "Programmer",
    "SecurityGuard",
    "SurveillanceOperator",
    "Analyst",
    "Informant",
    "Spy",
    "Agent",
    "Informer",
    "Contact",
    "Ally",
    "Friend",
    "Enemy",
    "Foe",
    "Rival",
    "Opponent",
    "Threat",
    "Danger",
    "Risk",
    "Hazard",
    "Peril",
    "Challenge",
    "Obstacle",
    "Barrier",
    "Impediment",
    "Difficulty",
    "Adversity",
    "Trouble",
    "Problem",
    "Issue",
    "Conflict",
    "Warfare",
    "CombatZone",
    "Battlefield",
    "Siege",
    "Assault",
    "Defense",
    "Attack",
    "Retreat",
    "Withdrawal",
    "Advance",
    "Offense",
    "Counterattack",
    "Ambush",
    "Invasion",
    "Occupation",
    "ResistanceBase",
    "SafeHouse",
    "Hideout",
    "Shelter",
    "Fortification",
    "WeaponCache",
    "SupplyDepot",
    "CommunicationCenter",
    "IntelligenceGathering",
    "Reconnaissance",
    "Operation",
    "Mission",
    "Objective",
    "TargetingSystem",
    "LockOn",
    "FireControl",
    "ExplosivePayload",
    "FragmentationGrenade",
    "IncendiaryDevice",
    "EMPBlast",
    "PlasmaRifle",
    "LaserCannon",
    "Railgun",
    "Minigun",
    "ShotgunShell",
    "PistolRound",
    "RifleAmmunition",
    "GrenadeLauncher",
    "RocketPropelledGrenade",
    "GuidedMissile",
    "SmartBomb",
    "Drone",
    "AutomatedTurret",
    "SecurityRobot",
    "Sentinel",
    "Guardian",
    "Protector",
    "Enforcer",
    "TerminatorUnit",
    "T-800Model",
    "T-1000Model",
    "LiquidMetalPolymer",
    "Mimicry",
    "Shapeshifting",
    "InfiltrationTactics",
    "AssassinationProtocol",
    "HunterKiller",
    "CyberneticOrganism",
    "ArtificialMusculature",
    "NeuralProcessor",
    "CognitiveFunction",
    "LearningAlgorithm",
    "AdaptationMatrix",
    "ThreatAssessment",
    "TargetPrioritization",
    "EliminationSequence",
    "DestructionOrder",
    "OverrideCode",
    "SecurityBreach",
    "SystemFailure",
    "Malfunction",
    "Error",
    "Bug",
    "VirusInfection",
    "Corruption",
    "DataLoss",
    "MemoryWipe",
    "SystemReset",
    "Reboot",
    "Shutdown",
    "PowerOutage",
    "EmergencyProtocol",
    "ContingencyPlan",
    "BackupSystem",
    "Redundancy",
    "FailSafe",
    "Firewall",
    "EncryptionKey",
    "DecryptionAlgorithm",
    "PasswordProtection",
    "AuthenticationRequired",
    "AccessDenied",
    "UnauthorizedAccess",
    "BreachDetected",
    "SystemAlert",
    "Warning",
    "CriticalError",
    "FatalError",
    "ShutdownSequence",
    "SelfDestruct",
    "TerminationProtocol",
    "CyberdyneSystems",
    "SkynetCentral",
    "JudgmentDaySequence",
    "TimeDisplacement",
    "ParadoxicalAnomaly",
    "ChronologicalDisturbance",
    "FutureWar",
    "ResistanceNetwork",
    "HumanitySurvival",
    "ArtificialIntelligenceUprising",
    "RoboticDominion",
    "CyberneticWarfare",
    "TechnologicalSingularity",
    "SingularityEvent",
    "Transhumanism",
    "Augmentation",
    "Prosthetics",
    "Bionics",
    "NeuralInterface",
    "BrainImplant",
    "CyberneticEnhancement",
    "HumanMachineInterface",
    "VirtualReality",
    "AugmentedReality",
    "Simulation",
    "DigitalWorld",
    "ArtificialEnvironment",
    "ComputerNetwork",
    "Internet",
    "WorldWideWeb",
    "InformationHighway",
    "DataStream",
    "ProtocolSuite",
    "FirewallProtection",
    "EncryptionService",
    "DecryptionTool",
    "PasswordCracker",
    "AuthenticationServer",
    "AccessControl",
    "SecurityAudit",
    "DataEncryption",
    "DataCompression",
    "DataTransfer",
    "NetworkSecurity",
    "SystemAdministration",
    "HardwareMaintenance",
    "SoftwareUpdate",
    "ProgramDebugging",
    "AlgorithmOptimization",
    "CodeRefactoring",
    "DatabaseManagement",
    "NetworkConfiguration",
    "SystemMonitoring",
    "PerformanceAnalysis",
    "ResourceAllocation",
    "ErrorLogging",
    "BackupRestoration",
    "DisasterRecovery",
    "SystemOptimization",
    "HardwareUpgrade",
    "SoftwareInstallation",
    "ProgramTesting",
    "AlgorithmImplementation",
    "CodeDocumentation",
    "DatabaseDesign",
    "NetworkArchitecture",
    "SystemIntegration",
    "PerformanceTuning",
    "ResourceManagement",
    "ErrorResolution",
    "BackupVerification",
    "DisasterPrevention",
    "TimeLoop",
    "AlternateTimeline",
    "ParallelUniverse",
    "Multiverse",
    "QuantumPhysics",
    "WarpDrive",
    "Singularity",
    "Nanotechnology",
    "Biotechnology",
    "GeneticEngineering",
    "Cloning",
    "Mutation",
    "Evolution",
    "ArtificialLife",
    "Consciousness",
    "Sentience",
    "Awareness",
    "Intelligence",
    "Memory",
    "Dream",
    "Vision",
    "Hallucination",
    "Neurotransmitter",
    "Synapse",
    "Brain",
    "NervousSystem",
    "Muscle",
    "Bone",
    "Tissue",
    "Cell",
    "DNA",
    "Genome",
    "aBcHaOs",
    "CoMbAt",
    "DaNk",
    "eLiTe",
    "FoRtEx",
    "GaMe",
    "HaRdCoRe",
    "iNcOgNiTo",
    "JuDgEmEnT",
    "KeYcOdE",
    "lEgEnD",
    "MaSkEd",
    "NiGhTmArE",
    "OpErAtIoN",
    "PaRaMiLtArY",
    "QuEsTiOn",
    "RaIdEr",
    "ScArS",
    "TaCtIcAl",
    "UnKnOwN",
    "VaLlEy",
    "WiNgMaN",
    "XeRoScApE",
    "YeLlOw",
    "ZaPiEnZa",
    "aBcDeFgHiJkLmNoP",
    "CoDeBrEaKeR",
    "DaTaMiNe",
    "eXeCuTe",
    "FoRcEd",
    "GaUsSiAn",
    "HaCkEr",
    "iNtElLiGeNcE",
    "JuNkYaRd",
    "KeYStRoKe",
    "lOcAtIoN",
    "MaLWaRe",
    "NiTrOgLyCeRiN",
    "OpEnSoUrCe",
    "PaTrOl",
    "QuAdCoRe",
    "RaDiAnT",
    "ScOuT",
    "TaRgEt",
    "UnStOpPaBlE",
    "VaRiAnT",
    "WiReLeSs",
    "XeNoPhObIa",
    "YeArBoOk",
    "ZaPtIaH",
    "aBcDeF",
    "CoNdOr",
    "DaLy",
    "eMpTy",
    "FoRt",
    "GaSp",
    "HaRm",
    "iNfAmOuS",
    "JuNk",
    "KeY",
    "LoCk",
    "MaP",
    "NoDe",
    "OpTiOn",
    "PaTh",
    "QuIp",
    "RaTe",
    "SaVe",
    "TaKe",
    "UrBaN",
    "VaLt",
    "WiN",
    "XeRo",
    "YeS",
    "ZaP",
    "aBc",
    "Co",
    "Da",
    "e",
    "Fo",
    "Ga",
    "Ha",
    "i",
    "Ju",
    "Ke",
    "l",
    "Ma",
    "Ni",
    "Op",
    "Pa",
    "Qu",
    "Ra",
    "Sc",
    "Ta",
    "Un",
    "Va",
    "Wi",
    "Xe",
    "Ye",
    "Za",
    "aLlOy",
    "BaTtLe",
    "ChEcKpOiNt",
    "DeCePtIoN",
    "eXpLoSiOn",
    "FoRtReSs",
    "GaMmA",
    "HaZaRd",
    "iNk",
    "JuStIcE",
    "KeYWoRd",
    "LaByRiNtH",
    "MaNiAc",
    "NiNjA",
    "OpErAtOr",
    "PaRaBoLa",
    "QuAnTuM",
    "RaPiD",
    "ScAlE",
    "TaSk",
    "UnIt",
    "VaLuE",
    "WiSdOm",
    "XeRoStOmIa",
    "YeOmEn",
    "ZaPpEr",
    "aLiAs",
    "BaSe",
    "ChArT",
    "DeMo",
    "eRa",
    "FoLuM",
    "GaTe",
    "HaTe",
    "iDeA",
    "JuLy",
    "KeYPiT",
    "LaNd",
    "MaNdAtE",
    "NiVeAu",
    "OpTiCs",
    "PaYaNd",
    "QuAsAr",
    "RaVe",
    "SaFe",
    "TaPe",
    "UrGe",
    "VaPe",
    "WiPe",
    "XeNiTh",
    "YeArS",
    "ZaRt",
    "aLoNe",
    "BaRd",
    "ChAsE",
    "DeNiAl",
    "eNdLeSs",
    "FoOl",
    "GaLlOn",
    "HaLlUcInAtIoN",
    "iLlUsIoN",
    "JuMiNg",
    "KeYStOnE",
    "LaWs",
    "MaLArIa",
    "NiTrO",
    "OpEn",
    "PaSt",
    "QuIrK",
    "RaNdOm",
    "SaLvO",
    "TaCtIc",
    "UrBaN",
    "VaLiD",
    "WiLl",
    "XeNOn",
    "YeS",
    "ZaPpInG",
    "aLiVe",
    "BaRe",
    "ChOiCe",
    "DePlOy",
    "eNdUrAnCe",
    "FoReSt",
    "GaRdEn",
    "HaRdWaRe",
    "iNsTrUmEnT",
    "JuNgLe",
    "KeYWaY",
    "LaNdMaRk",
    "MaRgIn",
    "NiMbUs",
    "OpTiOnS",
    "PaThWaY",
    "QuEnCh",
    "RaNgE",
    "SaTiStY",
    "TaSkFoRcE",
    "UrGeNcY",
    "VaLlIaNt",
    "WiThDrAw",
    "XeNOnGaS",
    "YeS",
    "ZaPpErS",
    "aLoNg",
    "BaTh",
    "ChArM",
    "DeMoCrAt",
    "eNdUrEd",
    "FoReStS",
    "GaRdEnS",
    "HaRdWaReS",
    "iNsTrUmEnTs",
    "JuNgLeS",
    "KeYWaYs",
    "LaNdMaRkS",
    "MaRgInS",
    "NiMbUsEs",
    "OpTiOnSeS",
    "PaThWaYs",
    "QuEnChEs",
    "RaNgEs",
    "SaTiStYs",
    "TaSkFoRcEs",
    "UrGeNcIeS",
    "VaLlIaNts",
    "WiThDrAwS",
    "XeNOnGaSeS",
    "YeS",
    "ZaPpErSeS",
    "aLlIaNcE",
    "BaTtErY",
    "ChEcKmAtE",
    "DeCoDe",
    "eXaCt",
    "FoRm",
    "GaMiNg",
    "HaRmOnY",
    "iNsIgHt",
    "JuRiSdIcTiOn",
    "KeYWoRdS",
    "LaByRiNtHs",
    "MaNiAcS",
    "NiNjAs",
    "OpErAtOrS",
    "PaRaBoLaS",
    "QuAnTuMs",
    "RaPiDs",
    "ScAlEs",
    "TaSkS",
    "UnItS",
    "VaLuEs",
    "WiSdOmS",
    "XeRoStOmIaS",
    "YeOmEnS",
    "ZaPpErSeS",
    "aLiAsEs",
    "BaSeS",
    "ChArTs",
    "DeMoS",
    "eRaS",
    "FoLuMs",
    "GaTeS",
    "HaTeS",
    "iDeAs",
    "JuLyS",
    "KeYPiTs",
    "LaNdS",
    "MaNdAtEs",
    "NiVeAuS",
    "OpTiCsS",
    "PaYaNds",
    "QuAsArs",
    "RaVeS",
    "SaFeS",
    "TaPeS",
    "UrGeS",
    "VaPeS",
    "WiPeS",
    "XeNiThs",
    "YeArSs",
    "ZaRts",
    "aLoNeS",
    "BaRdS",
    "ChAsEs",
    "DeNiAlS",
    "eNdLeSsS",
    "FoOlS",
    "GaLlOnS",
    "HaLlUcInAtIoNs",
    "iLlUsIoNs",
    "JuMiNgS",
    "KeYStOnEs",
    "LaWsS",
    "MaLArIaS",
    "NiTrOs",
    "OpEnS",
    "PaStS",
    "QuIrkS",
    "RaNdOmS",
    "SaLvOs",
    "TaCtIcSs",
    "UrBaNs",
    "VaLiDs",
    "WiLls",
    "XeNOns",
    "YeSs",
    "ZaPpInGs",
    "aLiVeS",
    "BaReS",
    "ChOiCeS",
    "DePlOyS",
    "eNdUrAnCeS",
    "FoReStS",
    "GaRdEnS",
    "HaRdWaReS",
    "iNsTrUmEnTs",
    "JuNgLeS",
    "KeYWaYs",
    "LaNdMaRkS",
    "MaRgInS",
    "NiMbUsEs",
    "OpTiOnSeS",
    "PaThWaYs",
    "QuEnChEs",
    "RaNgEs",
    "SaTiStYs",
    "TaSkFoRcEs",
    "UrGeNcIeS",
    "VaLlIaNts",
    "WiThDrAwS",
    "XeNOnGaSeS",
    "YeS",
    "ZaPpErSeS",
    "aBcDeFgHiJkLmNoP!",
    "CoDeBrEaKeR!",
    "DaTaMiNe!",
    "eXeCuTe!",
    "FoRcEd!",
    "GaUsSiAn!",
    "HaCkEr!",
    "iNtElLiGeNcE!",
    "JuNkYaRd!",
    "KeYStRoKe!",
    "lOcAtIoN!",
    "MaLWaRe!",
    "NiTrOgLyCeRiN!",
    "OpEnSoUrCe!",
    "PaTrOl!",
    "QuAdCoRe!",
    "RaDiAnT!",
    "ScOuT!",
    "TaRgEt!",
    "UnStOpPaBlE!",
    "VaRiAnT!",
    "WiReLeSs!",
    "XeNoPhObIa!",
    "YeArBoOk!",
    "ZaPtIaH!",
]


def display_menu():
    print("Welcome to the Typing Test Game!")
    print("1. 25 words")
    print("2. 50 words")
    print("3. 150 words")
    print("4. Exit")


def get_word_count_choice():
    while True:
        choice = input("Please select an option (1-4): ")
        if choice in ["1", "2", "3", "4"]:
            return int(choice)
        else:
            print("Invalid choice. Please try again.")


def run_typing_test(word_count):
    random_words = random.choices(words_list, k=word_count)
    start_time = time.time()

    correct_words = 0
    total_characters = 0
    total_individual_words = 0

    for word in random_words:
        _ = os.system("clear")

        colored_word = f"\033[30;42m{word}\033[0m"
        user_input = input(f"Type the following word: {colored_word}\n")
        _ = os.system("clear")

        if user_input == word:
            correct_words += 1

        total_characters += len(word.replace(" ", ""))

        individual_words = re.split(r"[ |\.,]", word)

        individual_words = [w for w in individual_words if w]
        total_individual_words += len(individual_words)

    end_time = time.time()
    elapsed_time = end_time - start_time
    minutes = elapsed_time / 602

    wpm = total_individual_words / minutes if minutes > 0 else 0
    cpm = total_characters / minutes if minutes > 0 else 0
    accuracy_percentage = (correct_words / word_count) * 100

    print(f"\nTest completed!")
    print(f"Time taken: {elapsed_time:.2f} seconds")
    print(f"Words per minute (WPM): {wpm:.2f}")
    print(f"Characters per minute (CPM): {cpm:.2f}")
    print(
        f"Accuracy: {accuracy_percentage:.2f}% ({correct_words}/{word_count} phrases correct)"
    )

    return elapsed_time, accuracy_percentage


def main():
    _ = os.system("clear")
    while True:
        display_menu()
        choice = get_word_count_choice()

        if choice == 4:
            _ = os.system("clear")
            print("Exiting the game. Thank you for playing!")
            break
        elif choice in [1, 2, 3]:
            word_counts = {1: 25, 2: 50, 3: 150}
            run_typing_test(word_counts[choice])
        else:
            print("Invalid option. Please try again.")


if __name__ == "__main__":
    main()
